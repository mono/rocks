#!/usr/bin/perl
use strict;
use Generator;
use Getopt::Long;

my $n = 1;
my $namespace = "Mono.Rocks";
my $output = "Lambdas.cs";
my $help = undef;

GetOptions (
	"n|count=i",    \$n,
	"o|output=s",   \$output,
	"namespace=s",  \$namespace,
	"h|?|help",     \$help
);

if ($help) {
	print <<EOF;
$0 [-n N] [-o FILE] [-h]
Create a C# file containing C# lambda helper methods.

Options:
  -n, --count=N       The number of types to generate.  Default is 1.
  -o, --output=FILE   The file to create.  Default is `Tuples.cs'.
      --namespace=NS  Place the types within the namespace NS.
                        Default is `Mono.Rocks'.
  -h, -?, --help      Show this message and exit.
EOF
	exit 0;
}

if ($n < 1) {
	print STDERR "error: n must be >= 1, was $n\n";
	exit 1;
}

my $handle = *STDOUT;

my $g = Generator->new ($handle);

my $header = <<EOF;
//
// $output: C# Lambda Expression Helpers.
//
// GENERATED CODE: DO NOT EDIT.
//
// To regenerate this code, execute: $0 -n $n -o $output
//
// Copyright (c) 2008 Novell, Inc. (http://www.novell.com)
EOF
$g->Write ($header);
$g->WriteLicense ();
$g->Write ("using System;\n");
$g->Write ("using System.Linq.Expressions;\n\n");

$g->Namespace ($namespace, sub {
	create_actions ($g, $n);

	$g->Type ("\npublic static partial class Lambda", sub {
		$g->Method (
			"\npublic static Action ", "Func", "Action action", "return action;\n"
		);
		$g->Method (
			"\npublic static Func<TResult> ", "Func<TResult>", "Func<TResult> func", "return func;\n"
		);
		$g->Method (
			"\npublic static Expression<Action> ", "Expression", "Expression<Action> expr", "return expr;\n"
		);
		$g->Method (
			"\npublic static Expression<Func<TResult>> ", "Expression<TResult>", "Expression<Func<TResult>> expr", "return expr;\n"
		);
		for (my $i = 1; $i <= $n; ++$i) {
			$g->Method (
				sub {
					$g->Write ("\npublic static ")->Action ($i)
						->Write ("<")->TypeParameterList ($i)->Write (">");
				},
				sub { $g->Write ("\n\tFunc<")->TypeParameterList ($i)->Write (">"); },
				sub { $g->Action ($i)->Write ("<")->TypeParameterList ($i)->Write ("> action"); },
				"return action;\n"
			);
			$g->Method (
				sub {
					$g->Write ("\npublic static ")->Func ($i)
						->Write ("<")->TypeParameterList ($i)->Write (", TResult>");
				},
				sub { $g->Write ("\n\tFunc<")->TypeParameterList ($i)->Write (", TResult>"); },
				sub { $g->Func ($i)->Write ("<")->TypeParameterList ($i)->Write (", TResult> func"); },
				"return func;\n"
			);
			$g->Method (
				sub {
					$g->Write ("\npublic static Expression<")->Action ($i)
						->Write ("<")->TypeParameterList ($i)->Write (">>");
				},
				sub { $g->Write ("\n\tExpression<")->TypeParameterList ($i)->Write (">"); },
				sub { $g->Write ("Expression<")->Action ($i)->Write ("<")->TypeParameterList ($i)->Write (">> expr"); },
				"return expr;\n"
			);
			$g->Method (
				sub {
					$g->Write ("\npublic static Expression<")->Func ($i)
						->Write ("<")->TypeParameterList ($i)->Write (", TResult>>");
				},
				sub { $g->Write ("\n\tExpression<")->TypeParameterList ($i)->Write (", TResult>"); },
				sub { $g->Write ("Expression<")->Func ($i)->Write ("<")->TypeParameterList ($i)->Write (", TResult>> expr"); },
				"return expr;\n"
			);
		}
	});
});

sub create_actions {
	my ($g, $n) = @_;
	if ($n > $g->MaxSystemFuncs) {
		for (my $i = $g->MaxSystemFuncs+1; $i <= $n; ++$i) {
			$g->Write ("\npublic delegate void RocksAction<");
			$g->TypeParameterList ($i);
			$g->Write ("> (");
			$g->MethodParameterList ($i);
			$g->Write (");");
		}
		$g->Write ("\n");
	}
}


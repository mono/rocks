<Type Name="Lambda" FullName="Mono.Rocks.Lambda">
  <TypeSignature Language="C#" Value="public static class Lambda" />
  <AssemblyInfo>
    <AssemblyName>Mono.Rocks</AssemblyName>
    <AssemblyVersion>0.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides static utility methods to generate anonymous delegates
            or expression trees of pre-determined types.
            </summary>
    <remarks>
      <para>
            C# lambda methods and anonymous delegates are a curious
            1.5-class citizen: They are implicitly convertable to any
            delegate type, but have no type by themselves.  Thus,
            the following code fails to compile:
            </para>
      <code lang="C#">
            ((int x) =&gt; Console.WriteLine (x))(5);</code>
      <para>It would instead need:</para>
      <code lang="C#">
            // either:
            Action&lt;int&gt; a = x =&gt; Console.WriteLine (x);
            a (5);
            //
            // or
            //
            ((Action&lt;int&gt;) (x =&gt; Console.WriteLine (x)))(5);</code>
      <para>
            So you'd either need to assign the lambda to an actual
            delegate type, or insert a cast.
            </para>
      <para>
        <see cref="M:Mono.Rocks.Lambda.Func" /> allows you to
            provide a lambda body for a builtin delegate type such as
            <see cref="T:System.Action" /> or <see cref="T:System.Func{TResult}" />,
            thus removing the need for a cast or an extra variable:
            </para>
      <code lang="C#">
            Lambda.Func ((int x) =&gt; Console.WriteLine (x)) (5);</code>
      <para>
        <see cref="T:Mono.Rocks.Lambda" /> provides the following sets of
            functionality:
            </para>
      <list type="bullet">
        <item>
          <term>Delegate creation methods, which return
            <see cref="T:System.Action" />-like delegates:
            <see cref="M:Mono.Rocks.Lambda.Func(System.Action)" />,
            <see cref="M:Mono.Rocks.Lambda.Func``1(System.Action{``0})" />,
            <see cref="M:Mono.Rocks.Lambda.Func``2(System.Action{``0,``1})" />,
            <see cref="M:Mono.Rocks.Lambda.Func``3(System.Action{``0,``1,``2})" />, and
            <see cref="M:Mono.Rocks.Lambda.Func``4(System.Action{``0,``1,``2,``3})" />.
            </term>
        </item>
        <item>
          <term>Delegate creation methods which return
            return <see cref="T:System.Func{TResult}" />-like delegates
            <see cref="M:Mono.Rocks.Lambda.Func``1(System.Func{``0})" />,
            <see cref="M:Mono.Rocks.Lambda.Func``2(System.Func{``0,``1})" />,
            <see cref="M:Mono.Rocks.Lambda.Func``3(System.Func{``0,``1,``2})" />,
            <see cref="M:Mono.Rocks.Lambda.Func``4(System.Func{``0,``1,``2,``3})" />, and
            <see cref="M:Mono.Rocks.Lambda.Func``5(System.Func{``0,``1,``2,``3,``4})" />.
            </term>
        </item>
        <item>
          <term>
            <see cref="T:System.Linq.Expressions.Expression" />-creating methods:
            <see cref="M:Mono.Rocks.Lambda.Expression(System.Linq.Expressions.Expression{System.Action})" />,
            <see cref="M:Mono.Rocks.Lambda.Expression``1(System.Linq.Expressions.Expression{System.Func{``0}})" />,
            <see cref="M:Mono.Rocks.Lambda.Expression``1(System.Linq.Expressions.Expression{System.Action{``0}})" />,
            <see cref="M:Mono.Rocks.Lambda.Expression``2(System.Linq.Expressions.Expression{System.Func{``0,``1}})" />,
            <see cref="M:Mono.Rocks.Lambda.Expression``2(System.Linq.Expressions.Expression{System.Action{``0,``1}})" />,
            <see cref="M:Mono.Rocks.Lambda.Expression``3(System.Linq.Expressions.Expression{System.Func{``0,``1,``2}})" />,
            <see cref="M:Mono.Rocks.Lambda.Expression``3(System.Linq.Expressions.Expression{System.Action{``0,``1,``2}})" />,
            <see cref="M:Mono.Rocks.Lambda.Expression``4(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}})" />,
            <see cref="M:Mono.Rocks.Lambda.Expression``4(System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}})" />, and
            <see cref="M:Mono.Rocks.Lambda.Expression``5(System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}})" />.
            </term>
        </item>
        <item>
          <term>Y-Combinators, which permit writing recursive lambdas:
            <see cref="M:Mono.Rocks.Lambda.RecFunc``2(System.Func{System.Func{``0,``1},System.Func{``0,``1}})" />,
            <see cref="M:Mono.Rocks.Lambda.RecFunc``3(System.Func{System.Func{``0,``1,``2},System.Func{``0,``1,``2}})" />,
            <see cref="M:Mono.Rocks.Lambda.RecFunc``4(System.Func{System.Func{``0,``1,``2,``3},System.Func{``0,``1,``2,``3}})" />, and
            <see cref="M:Mono.Rocks.Lambda.RecFunc``5(System.Func{System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4}})" />.
            </term>
        </item>
      </list>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Expression">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;Action&gt; Expression (System.Linq.Expressions.Expression&lt;Action&gt; expr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Action&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expr" Type="System.Linq.Expressions.Expression&lt;System.Action&gt;" />
      </Parameters>
      <Docs>
        <param name="expr">
            The <see cref="T:System.Linq.Expressions.Expression{System.Action}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression{System.Action}" /> expression tree.
            </summary>
        <returns>
            Returns <paramref name="expr" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression&lt;T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;Func&lt;T,TResult&gt;&gt; Expression&lt;T,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T,TResult&gt;&gt; expr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;T,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expr" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            A <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1}}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1}}" /> return type.
            </typeparam>
        <param name="expr">
            The <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1}}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1}}" /> expression tree.
            </summary>
        <returns>
            Returns <paramref name="expr" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;Action&lt;T&gt;&gt; Expression&lt;T&gt; (System.Linq.Expressions.Expression&lt;Action&lt;T&gt;&gt; expr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Action&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expr" Type="System.Linq.Expressions.Expression&lt;System.Action&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            A <see cref="T:System.Linq.Expressions.Expression{System.Action{``0}}" /> parameter type.
            </typeparam>
        <param name="expr">
            The <see cref="T:System.Linq.Expressions.Expression{System.Action{``0}}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression{System.Action{``0}}" /> expression tree.
            </summary>
        <returns>
            Returns <paramref name="expr" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression&lt;T1,T2,T3,T4,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;Func&lt;T1,T2,T3,T4,TResult&gt;&gt; Expression&lt;T1,T2,T3,T4,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T1,T2,T3,T4,TResult&gt;&gt; expr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;T1,T2,T3,T4,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expr" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T1,T2,T3,T4,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}}" /> parameter type.
            </typeparam>
        <typeparam name="T3">
            A <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}}" /> parameter type.
            </typeparam>
        <typeparam name="T4">
            A <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}}" /> return type.
            </typeparam>
        <param name="expr">
            The <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3,``4}}" /> expression tree.
            </summary>
        <returns>
            Returns <paramref name="expr" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression&lt;T1,T2,T3,T4&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;Action&lt;T1,T2,T3,T4&gt;&gt; Expression&lt;T1,T2,T3,T4&gt; (System.Linq.Expressions.Expression&lt;Action&lt;T1,T2,T3,T4&gt;&gt; expr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Action&lt;T1,T2,T3,T4&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expr" Type="System.Linq.Expressions.Expression&lt;System.Action&lt;T1,T2,T3,T4&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}}" /> parameter type.
            </typeparam>
        <typeparam name="T3">
            A <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}}" /> parameter type.
            </typeparam>
        <typeparam name="T4">
            A <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}}" /> parameter type.
            </typeparam>
        <param name="expr">
            The <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2,``3}}" /> expression tree.
            </summary>
        <returns>
            Returns <paramref name="expr" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression&lt;T1,T2,T3,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;Func&lt;T1,T2,T3,TResult&gt;&gt; Expression&lt;T1,T2,T3,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T1,T2,T3,TResult&gt;&gt; expr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;T1,T2,T3,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expr" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T1,T2,T3,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}}" /> parameter type.
            </typeparam>
        <typeparam name="T3">
            A <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}}" /> return type.
            </typeparam>
        <param name="expr">
            The <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2,``3}}" /> expression tree.
            </summary>
        <returns>
            Returns <paramref name="expr" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;Action&lt;T1,T2,T3&gt;&gt; Expression&lt;T1,T2,T3&gt; (System.Linq.Expressions.Expression&lt;Action&lt;T1,T2,T3&gt;&gt; expr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Action&lt;T1,T2,T3&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expr" Type="System.Linq.Expressions.Expression&lt;System.Action&lt;T1,T2,T3&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2}}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2}}" /> parameter type.
            </typeparam>
        <typeparam name="T3">
            A <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2}}" /> parameter type.
            </typeparam>
        <param name="expr">
            The <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2}}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1,``2}}" /> expression tree.
            </summary>
        <returns>
            Returns <paramref name="expr" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression&lt;T1,T2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;Func&lt;T1,T2,TResult&gt;&gt; Expression&lt;T1,T2,TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;T1,T2,TResult&gt;&gt; expr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;T1,T2,TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expr" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;T1,T2,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}" /> return type.
            </typeparam>
        <param name="expr">
            The <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression{System.Func{``0,``1,``2}}" /> expression tree.
            </summary>
        <returns>
            Returns <paramref name="expr" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;Action&lt;T1,T2&gt;&gt; Expression&lt;T1,T2&gt; (System.Linq.Expressions.Expression&lt;Action&lt;T1,T2&gt;&gt; expr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Action&lt;T1,T2&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expr" Type="System.Linq.Expressions.Expression&lt;System.Action&lt;T1,T2&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1}}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1}}" /> parameter type.
            </typeparam>
        <param name="expr">
            The <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1}}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression{System.Action{``0,``1}}" /> expression tree.
            </summary>
        <returns>
            Returns <paramref name="expr" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Expression&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;Func&lt;TResult&gt;&gt; Expression&lt;TResult&gt; (System.Linq.Expressions.Expression&lt;Func&lt;TResult&gt;&gt; expr);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;System.Func&lt;TResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expr" Type="System.Linq.Expressions.Expression&lt;System.Func&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
            The <see cref="T:System.Linq.Expressions.Expression{System.Func{``0}}" /> return type.
            </typeparam>
        <param name="expr">
            The <see cref="T:System.Linq.Expressions.Expression{System.Func{``0}}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Linq.Expressions.Expression{System.Func{``0}}" /> expression tree.
            </summary>
        <returns>
            Returns <paramref name="expr" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Func">
      <MemberSignature Language="C#" Value="public static Action Func (Action lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lambda" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="lambda">
            The <see cref="T:System.Action" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Action" /> delegate.
            </summary>
        <returns>
            Returns <paramref name="lambda" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Func&lt;T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;T,TResult&gt; Func&lt;T,TResult&gt; (Func&lt;T,TResult&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;T,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;T,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            A <see cref="T:System.Func{``0,``1}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Func{``0,``1}" /> return type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Func{``0,``1}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Func{``0,``1}" /> delegate.
            </summary>
        <returns>
            Returns <paramref name="lambda" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Func&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Action&lt;T&gt; Func&lt;T&gt; (Action&lt;T&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Action&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            A <see cref="T:System.Action{``0}" /> parameter type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Action{``0}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Action{``0}" /> delegate.
            </summary>
        <returns>
            Returns <paramref name="lambda" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Func&lt;T1,T2,T3,T4,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;T1,T2,T3,T4,TResult&gt; Func&lt;T1,T2,T3,T4,TResult&gt; (Func&lt;T1,T2,T3,T4,TResult&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;T1,T2,T3,T4,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;T1,T2,T3,T4,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> parameter type.
            </typeparam>
        <typeparam name="T3">
            A <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> parameter type.
            </typeparam>
        <typeparam name="T4">
            A <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> return type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> delegate.
            </summary>
        <returns>
            Returns <paramref name="lambda" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Func&lt;T1,T2,T3,T4&gt;">
      <MemberSignature Language="C#" Value="public static Action&lt;T1,T2,T3,T4&gt; Func&lt;T1,T2,T3,T4&gt; (Action&lt;T1,T2,T3,T4&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;T1,T2,T3,T4&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Action&lt;T1,T2,T3,T4&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Action{``0,``1,``2,``3}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Action{``0,``1,``2,``3}" /> parameter type.
            </typeparam>
        <typeparam name="T3">
            A <see cref="T:System.Action{``0,``1,``2,``3}" /> parameter type.
            </typeparam>
        <typeparam name="T4">
            A <see cref="T:System.Action{``0,``1,``2,``3}" /> parameter type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Action{``0,``1,``2,``3}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Action{``0,``1,``2,``3}" /> delegate.
            </summary>
        <returns>
            Returns <paramref name="lambda" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Func&lt;T1,T2,T3,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;T1,T2,T3,TResult&gt; Func&lt;T1,T2,T3,TResult&gt; (Func&lt;T1,T2,T3,TResult&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;T1,T2,T3,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;T1,T2,T3,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Func{``0,``1,``2,``3}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Func{``0,``1,``2,``3}" /> parameter type.
            </typeparam>
        <typeparam name="T3">
            A <see cref="T:System.Func{``0,``1,``2,``3}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Func{``0,``1,``2,``3}" /> return type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Func{``0,``1,``2,``3}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Func{``0,``1,``2,``3}" /> delegate.
            </summary>
        <returns>
            Returns <paramref name="lambda" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Func&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static Action&lt;T1,T2,T3&gt; Func&lt;T1,T2,T3&gt; (Action&lt;T1,T2,T3&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;T1,T2,T3&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Action&lt;T1,T2,T3&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Action{``0,``1,``2}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Action{``0,``1,``2}" /> parameter type.
            </typeparam>
        <typeparam name="T3">
            A <see cref="T:System.Action{``0,``1,``2}" /> parameter type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Action{``0,``1,``2}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Action{``0,``1,``2}" /> delegate.
            </summary>
        <returns>
            Returns <paramref name="lambda" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Func&lt;T1,T2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;T1,T2,TResult&gt; Func&lt;T1,T2,TResult&gt; (Func&lt;T1,T2,TResult&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;T1,T2,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;T1,T2,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Func{``0,``1,``2}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Func{``0,``1,``2}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Func{``0,``1,``2}" /> return type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Func{``0,``1,``2}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Func{``0,``1,``2}" /> delegate.
            </summary>
        <returns>
            Returns <paramref name="lambda" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Func&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static Action&lt;T1,T2&gt; Func&lt;T1,T2&gt; (Action&lt;T1,T2&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Action&lt;T1,T2&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Action&lt;T1,T2&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Action{``0,``1}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Action{``0,``1}" /> parameter type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Action{``0,``1}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Action{``0,``1}" /> delegate.
            </summary>
        <returns>
            Returns <paramref name="lambda" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Func&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;TResult&gt; Func&lt;TResult&gt; (Func&lt;TResult&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
            The <see cref="T:System.Func{``0}" /> return type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Func{``0}" /> to return.
            </param>
        <summary>
            Creates a <see cref="T:System.Func{``0}" /> delegate.
            </summary>
        <returns>
            Returns <paramref name="lambda" />.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecFunc&lt;T,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;T,TResult&gt; RecFunc&lt;T,TResult&gt; (Func&lt;Func&lt;T,TResult&gt;,Func&lt;T,TResult&gt;&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;T,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;System.Func&lt;T,TResult&gt;,System.Func&lt;T,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
            A <see cref="T:System.Func{``0,``1}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Func{``0,``1}" /> return type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Func{System.Func{``0,``1},System.Func{``0,``1}}" /> to use.
            </param>
        <summary>
            Creates a <see cref="T:System.Func{``0,``1}" /> delegate, which may be recursive.
            </summary>
        <returns>
            Returns a <see cref="T:System.Func{``0,``1}" /> which (eventually) invokes
            <paramref name="lambda" />.
            </returns>
        <remarks>
          <para>
            The following example makes use of a recursive lambda:
            </para>
          <code lang="C#">
            Func&lt;int, int&gt; factorial = Lambda.RecFunc&lt;int, int&gt; (
            fac =&gt; x =&gt; x == 0 ? 1 : x * fac (x-1));
            Console.WriteLine (factorial (5));  // prints "120"</code>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RecFunc&lt;T1,T2,T3,T4,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;T1,T2,T3,T4,TResult&gt; RecFunc&lt;T1,T2,T3,T4,TResult&gt; (Func&lt;Func&lt;T1,T2,T3,T4,TResult&gt;,Func&lt;T1,T2,T3,T4,TResult&gt;&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;T1,T2,T3,T4,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="T4" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;System.Func&lt;T1,T2,T3,T4,TResult&gt;,System.Func&lt;T1,T2,T3,T4,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> parameter type.
            </typeparam>
        <typeparam name="T3">
            A <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> parameter type.
            </typeparam>
        <typeparam name="T4">
            A <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> return type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Func{System.Func{``0,``1,``2,``3,``4},System.Func{``0,``1,``2,``3,``4}}" /> to use.
            </param>
        <summary>
            Creates a <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> delegate, which may be recursive.
            </summary>
        <returns>
            Returns a <see cref="T:System.Func{``0,``1,``2,``3,``4}" /> which (eventually) invokes
            <paramref name="lambda" />.
            </returns>
        <remarks>
          <para>
            The following example makes use of a recursive lambda:
            </para>
          <code lang="C#">
            Func&lt;int, int&gt; factorial = Lambda.RecFunc&lt;int, int&gt; (
            fac =&gt; x =&gt; x == 0 ? 1 : x * fac (x-1));
            Console.WriteLine (factorial (5));  // prints "120"</code>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RecFunc&lt;T1,T2,T3,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;T1,T2,T3,TResult&gt; RecFunc&lt;T1,T2,T3,TResult&gt; (Func&lt;Func&lt;T1,T2,T3,TResult&gt;,Func&lt;T1,T2,T3,TResult&gt;&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;T1,T2,T3,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;System.Func&lt;T1,T2,T3,TResult&gt;,System.Func&lt;T1,T2,T3,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Func{``0,``1,``2,``3}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Func{``0,``1,``2,``3}" /> parameter type.
            </typeparam>
        <typeparam name="T3">
            A <see cref="T:System.Func{``0,``1,``2,``3}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Func{``0,``1,``2,``3}" /> return type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Func{System.Func{``0,``1,``2,``3},System.Func{``0,``1,``2,``3}}" /> to use.
            </param>
        <summary>
            Creates a <see cref="T:System.Func{``0,``1,``2,``3}" /> delegate, which may be recursive.
            </summary>
        <returns>
            Returns a <see cref="T:System.Func{``0,``1,``2,``3}" /> which (eventually) invokes
            <paramref name="lambda" />.
            </returns>
        <remarks>
          <para>
            The following example makes use of a recursive lambda:
            </para>
          <code lang="C#">
            Func&lt;int, int&gt; factorial = Lambda.RecFunc&lt;int, int&gt; (
            fac =&gt; x =&gt; x == 0 ? 1 : x * fac (x-1));
            Console.WriteLine (factorial (5));  // prints "120"</code>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
      </Docs>
    </Member>
    <Member MemberName="RecFunc&lt;T1,T2,TResult&gt;">
      <MemberSignature Language="C#" Value="public static Func&lt;T1,T2,TResult&gt; RecFunc&lt;T1,T2,TResult&gt; (Func&lt;Func&lt;T1,T2,TResult&gt;,Func&lt;T1,T2,TResult&gt;&gt; lambda);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;T1,T2,TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="lambda" Type="System.Func&lt;System.Func&lt;T1,T2,TResult&gt;,System.Func&lt;T1,T2,TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
            A <see cref="T:System.Func{``0,``1,``2}" /> parameter type.
            </typeparam>
        <typeparam name="T2">
            A <see cref="T:System.Func{``0,``1,``2}" /> parameter type.
            </typeparam>
        <typeparam name="TResult">
            The <see cref="T:System.Func{``0,``1,``2}" /> return type.
            </typeparam>
        <param name="lambda">
            The <see cref="T:System.Func{System.Func{``0,``1,``2},System.Func{``0,``1,``2}}" /> to use.
            </param>
        <summary>
            Creates a <see cref="T:System.Func{``0,``1,``2}" /> delegate, which may be recursive.
            </summary>
        <returns>
            Returns a <see cref="T:System.Func{``0,``1,``2}" /> which (eventually) invokes
            <paramref name="lambda" />.
            </returns>
        <remarks>
          <para>
            The following example makes use of a recursive lambda:
            </para>
          <code lang="C#">
            Func&lt;int, int&gt; factorial = Lambda.RecFunc&lt;int, int&gt; (
            fac =&gt; x =&gt; x == 0 ? 1 : x * fac (x-1));
            Console.WriteLine (factorial (5));  // prints "120"</code>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
        <exception cref="T:System.ArgumentNullException">
            if <paramref name="lambda" /> is <see langword="null" />.
            </exception>
      </Docs>
    </Member>
  </Members>
</Type>

#!/usr/bin/perl
use strict;
use Generator;
use Getopt::Long;

my $n = 1;
my $namespace = "Mono.Rocks";
my $output = "Curry.cs";
my $help = undef;

GetOptions (
	"n|count=i",    \$n,
	"o|output=s",   \$output,
	"namespace=s",  \$namespace,
	"h|?|help",     \$help
);

if ($help) {
	print <<EOF;
$0 [-n N] [-o FILE] [-h]
Create a C# file containing C# Func/Action curry extension methods.

Options:
  -n, --count=N       The number of types to generate.  Default is 1.
  -o, --output=FILE   The file to create.  Default is `Curry.cs'.
      --namespace=NS  Place the types within the namespace NS.
                        Default is `Mono.Rocks'.
  -h, -?, --help      Show this message and exit.
EOF
	exit 0;
}

if ($n < 1) {
	print STDERR "error: n must be >= 1, was $n\n";
	exit 1;
}

my $handle = *STDOUT;

my $g = Generator->new ($handle);

my $header = <<EOF;
//
// $output: C# Action and Func Currying Helpers
// 
// GENERATED CODE: DO NOT EDIT.
//
// To regenerate this code, execute: $0 -n $n -o $output
//
// Copyright (c) 2008 Novell, Inc. (http://www.novell.com)
EOF
$g->Write ($header);
$g->WriteLicense ();
$g->Write ("using System;\n");
$g->Write ("using System.Linq.Expressions;\n\n");

$g->Namespace ($namespace, sub {
	$g->Write ("\n");
	$g->XmlSummary(
qq(Provides extension methods on <see cref="T:System.Action{T}"/>,
<see cref="T:System.Func{T,TResult}"/>, and related delegates to 
curry delegate arguments.));
	$g->XmlRemarks (
qq(<para>
 Currying is a way to easily transform functions which accept N 
 arguments into functions which accept N-1 arguments, by "fixing"
 arguments with a value.
</para>
<para>
 Since C# functions aren't first class, but 
 <see cref="T:System.Delegate"/>s are, we can provide curring on
 delegate types instead on functions, which provides something quite
 similar.  The <see cref="M:Mono.Rocks.CurryRocks.Curry"/> methods 
 allow "fixing" one or more delegate parameters with values, 
 returning a new delegate which, when invoke, will pass the fixed 
 parameters to the original delegate.
</para>
<code lang="C#">
Func&lt;int,int,int,int&gt; function = Lambda.F ((int a, int b, int c) => a + b + c);
Func&lt;int,int,int&gt;     f_3      = function.Curry (3);
Func&lt;int&gt;             f_321    = function.Curry (3, 2, 1);
Console.WriteLine (f_3 (2, 1));  // prints (3 + 2 + 1) == "6"
Console.WriteLine (f_321 ());    // prints (3 + 2 + 1) == "6"</code>
<para>
 All possible argument and return delegate permutations are provided
 for the <see cref="T:System.Action{T}"/>, 
 <see cref="T:System.Func{T,TResult}"/>, and related types.
</para>));
	$g->Type ("public static class CurryRocks ", sub {
		for (my $ntypes = 1; $ntypes <= $n; ++$ntypes) {
			for (my $nret = 0; $nret < $ntypes; ++$nret) {
				$g->Write ("\n");
				create_delegate_doc ($g, $nret, $ntypes, 
					Generator::GetDocAction ($ntypes), action_ret_xml ($nret, $ntypes));
				$g->Method (
					sub { action_ret_type ($g, $nret, $ntypes); },
					sub { action_curry ($g, $nret, $ntypes); },
					sub { action_args ($g, $nret, $ntypes); },
					sub { body ($g, $nret, $ntypes); }
				);
				$g->Write ("\n");
				create_tuple_doc ($g, $nret, $ntypes, 
					Generator::GetDocAction ($ntypes), action_ret_xml ($nret, $ntypes));
				$g->Method (
					sub { action_ret_type ($g, $nret, $ntypes); },
					sub { action_curry ($g, $nret, $ntypes); },
					sub { action_tuple_args ($g, $nret, $ntypes); },
					sub { tuple_body ($g, $nret, $ntypes); }
				);
				$g->Write ("\n");
				create_delegate_doc ($g, $nret, $ntypes, 
					Generator::GetDocFunc ($ntypes), func_ret_xml ($nret, $ntypes));
				$g->Method (
					sub { func_ret_type ($g, $nret, $ntypes); },
					sub { func_curry ($g, $nret, $ntypes); },
					sub { func_args ($g, $nret, $ntypes); },
					sub { body ($g, $nret, $ntypes); }
				);
				$g->Write ("\n");
				create_tuple_doc ($g, $nret, $ntypes, 
					Generator::GetDocFunc ($ntypes), func_ret_xml ($nret, $ntypes));
				$g->Method (
					sub { func_ret_type ($g, $nret, $ntypes); },
					sub { func_curry ($g, $nret, $ntypes); },
					sub { func_tuple_args ($g, $nret, $ntypes); },
					sub { tuple_body ($g, $nret, $ntypes); }
				);
			}
		}
	});
});

sub action_ret_type {
	my ($g, $nret, $ntypes) = @_;

	$g->Write ("public static ")->Action ($nret);
	my $ret_start = $ntypes - $nret + 1;
	if ($nret) {
		$g->Write ("<");
		$g->TypeParameterList ($ntypes, $ret_start);
		$g->Write (">");
	}
}

sub action_curry {
	my ($g, $nret, $ntypes) = @_;

	$g->Write ("\n\tCurry<");
	$g->TypeParameterList ($ntypes);
	$g->Write (">");
}

sub action_args {
	my ($g, $nret, $ntypes) = @_;

	$g->Write ("this ")->Action ($nret)->Write ("<");
	$g->TypeParameterList ($ntypes);
	$g->Write ("> self, ");
	$g->MethodParameterList ($ntypes, 1, $ntypes - $nret);
}

sub action_tuple_args {
	my ($g, $nret, $ntypes) = @_;

	$g->Write ("this ")->Action ($nret)->Write ("<");
	$g->TypeParameterList ($ntypes);
	$g->Write ("> self, ");
	$g->Write ("Tuple<")->TypeParameterList ($ntypes, 1, $ntypes - $nret)->Write ("> values");
}

sub body {
	my ($g, $nret, $ntypes) = @_;

	my $ret_start = $ntypes - $nret + 1;
	$g->Write ("Check.Self (self);\n\n");
	$g->Write ("return (");
	if ($nret) {
		$g->ValueList ($ntypes, $ret_start);
	}
	$g->Write (") => self (");
	$g->ValueList ($ntypes, 1, $ntypes - $nret);
	if ($nret) {
		$g->Write (", ");
		$g->ValueList ($ntypes, $ret_start);
	}
	$g->Write (");\n");
}

sub tuple_body {
	my ($g, $nret, $ntypes) = @_;

	my $ret_start = $ntypes - $nret + 1;
	$g->Write ("Check.Self (self);\n");
	$g->Write ("return (");
	if ($nret) {
		$g->ValueList ($ntypes, $ret_start);
	}
	$g->Write (") => self (");
	$g->Write ("values._1");
	for (my $i = 2; $i <= $ntypes - $nret; ++$i) {
		$g->Write (", ")->Write ("values._$i");
	}
	if ($nret) {
		$g->Write (", ");
		$g->ValueList ($ntypes, $ret_start);
	}
	$g->Write (");\n");
}

sub func_ret_type {
	my ($g, $nret, $ntypes) = @_;

	$g->Write ("public static ")->Func ($nret)->Write ("<");
	my $ret_start = $ntypes - $nret + 1;
	if ($nret) {
		$g->TypeParameterList ($ntypes, $ret_start);
		$g->Write (", ");
	}
	$g->Write ("TResult>");
}

sub func_ret_xml {
	my ($nret, $ntypes) = @_;

	my $t = Generator::GetDocFuncType ($nret) . "{";
	if ($nret) {
		$t .= Generator::GetTypeParameterList ($ntypes, $ntypes - $nret + 1) . ", ";
	}
	$t .= "TResult}";
	return $t;
}

sub func_curry {
	my ($g, $nret, $ntypes) = @_;

	$g->Write ("\n\tCurry<");
	$g->TypeParameterList ($ntypes);
	$g->Write (", TResult>");
}

sub func_args {
	my ($g, $nret, $ntypes) = @_;

	$g->Write ("this ")->Func ($nret)->Write ("<");
	$g->TypeParameterList ($ntypes);
	$g->Write (", TResult> self, ");
	$g->MethodParameterList ($ntypes, 1, $ntypes - $nret);
}

sub func_tuple_args {
	my ($g, $nret, $ntypes) = @_;

	$g->Write ("this ")->Func ($nret)->Write ("<");
	$g->TypeParameterList ($ntypes);
	$g->Write (", TResult> self, ");
	$g->Write ("Tuple<")->TypeParameterList ($ntypes, 1, $ntypes - $nret)->Write ("> values");
}

sub action_ret_type {
	my ($g, $nret, $ntypes) = @_;

	$g->Write ("public static ")->Action ($nret);
	my $ret_start = $ntypes - $nret + 1;
	if ($nret) {
		$g->Write ("<");
		$g->TypeParameterList ($ntypes, $ret_start);
		$g->Write (">");
	}
}

sub action_ret_xml {
	my ($nret, $ntypes) = @_;

	return Generator::GetDocActionType ($nret) . 
		($nret > 0 ? "{" . Generator::GetTypeParameterList ($ntypes, $ntypes - $nret + 1) .  "}" : "");
}

sub create_doc {
	my ($g, $nret, $ntypes, $tself, $tret, $values) = @_;

	for (my $i = 1; $i <= $ntypes; ++$i) {
		$g->XmlTypeparam (Generator::GetTypeParameter ($ntypes, $i), 
			"A <see cref=\"T:$tself\"/> parameter type.");
	}
	if ($tself =~ m/Func/) {
		$g->XmlTypeparam ("TResult", "The <see cref=\"T:$tself\"/> return type.");
	}
	$g->XmlParam ("self", 
		"The <see cref=\"T:$tself\"/> to curry.");
	$values->();
	$g->XmlSummary ("Creates a <see cref=\"T:$tret\"/> delegate.");
	$g->XmlReturns (
qq(Returns a <see cref="T:$tret"/> which, when invoked, will
invoke <paramref name="self"/> along with the provided fixed parameters.));
	# $g->XmlRemarks ("");
}

sub create_delegate_doc {
	my ($g, $nret, $ntypes, $tself, $tret) = @_;

	create_doc ($g, $nret, $ntypes, $tself, $tret, sub {
		for (my $i = 1; $i <= $ntypes - $nret; ++$i) {
			my $tp = Generator::GetTypeParameter ($ntypes, $i);
			$g->XmlParam (Generator::GetValue ($ntypes, $i),
				"A value of type <typeparamref name=\"$tp\"/> to fix.");
		}
	});
}

sub create_tuple_doc {
	my ($g, $nret, $ntypes, $tself, $tret) = @_;

	create_doc ($g, $nret, $ntypes, $tself, $tret, sub {
		$g->XmlParam ("values",
			"A value of type <see cref=\"T:Mono.Rocks.Tuple{" . 
			Generator::GetTypeParameterList ($ntypes, 1, $ntypes - $nret) . 
			"}\"/> which contains the values to fix.");
	});
}

